Resources.AWSEC2LaunchTemplatemasterustest1amasterscontainerdexamplecom.Properties.LaunchTemplateData.UserData: "#!/bin/bash\nset -o errexit\nset -o nounset\nset -o pipefail\n\nNODEUP_URL_AMD64=https://artifacts.k8s.io/binaries/kops/1.19.0-alpha.3/linux/amd64/nodeup,https://github.com/kubernetes/kops/releases/download/v1.19.0-alpha.3/nodeup-linux-amd64,https://kubeupv2.s3.amazonaws.com/kops/1.19.0-alpha.3/linux/amd64/nodeup\nNODEUP_HASH_AMD64=6980fda4fa37bbdc043738cf4ddac6388eb57f561895c69299c1b0ee263d465d\nNODEUP_URL_ARM64=https://artifacts.k8s.io/binaries/kops/1.19.0-alpha.3/linux/arm64/nodeup,https://github.com/kubernetes/kops/releases/download/v1.19.0-alpha.3/nodeup-linux-arm64,https://kubeupv2.s3.amazonaws.com/kops/1.19.0-alpha.3/linux/arm64/nodeup\nNODEUP_HASH_ARM64=dcc7f9f3c180ee76a511627e46da0ac69cdcb518cdf3be348e5ed046d491eb87\n\nexport AWS_REGION=us-test-1\n\n\n\n\nsysctl -w net.ipv4.tcp_rmem='4096 12582912 16777216' || true\n\n\nfunction ensure-install-dir() {\n  INSTALL_DIR=\"/opt/kops\"\n  # On ContainerOS, we install under /var/lib/toolbox; /opt is ro and noexec\n  if [[ -d /var/lib/toolbox ]]; then\n    INSTALL_DIR=\"/var/lib/toolbox/kops\"\n  fi\n  mkdir -p ${INSTALL_DIR}/bin\n  mkdir -p ${INSTALL_DIR}/conf\n  cd ${INSTALL_DIR}\n}\n\n# Retry a download until we get it. args: name, sha, url1, url2...\ndownload-or-bust() {\n  local -r file=\"$1\"\n  local -r hash=\"$2\"\n  shift 2\n\n  urls=( $* )\n  while true; do\n    for url in \"${urls[@]}\"; do\n      commands=(\n        \"curl -f --ipv4 --compressed -Lo \"${file}\" --connect-timeout 20 --retry 6 --retry-delay 10\"\n        \"wget --inet4-only --compression=auto -O \"${file}\" --connect-timeout=20 --tries=6 --wait=10\"\n        \"curl -f --ipv4 -Lo \"${file}\" --connect-timeout 20 --retry 6 --retry-delay 10\"\n        \"wget --inet4-only -O \"${file}\" --connect-timeout=20 --tries=6 --wait=10\"\n      )\n      for cmd in \"${commands[@]}\"; do\n        echo \"Attempting download with: ${cmd} {url}\"\n        if ! (${cmd} \"${url}\"); then\n          echo \"== Download failed with ${cmd} ==\"\n          continue\n        fi\n        if [[ -n \"${hash}\" ]] && ! validate-hash \"${file}\" \"${hash}\"; then\n          echo \"== Hash validation of ${url} failed. Retrying. ==\"\n          rm -f \"${file}\"\n        else\n          if [[ -n \"${hash}\" ]]; then\n            echo \"== Downloaded ${url} (SHA1 = ${hash}) ==\"\n          else\n            echo \"== Downloaded ${url} ==\"\n          fi\n          return\n        fi\n      done\n    done\n\n    echo \"All downloads failed; sleeping before retrying\"\n    sleep 60\n  done\n}\n\nvalidate-hash() {\n  local -r file=\"$1\"\n  local -r expected=\"$2\"\n  local actual\n\n  actual=$(sha256sum ${file} | awk '{ print $1 }') || true\n  if [[ \"${actual}\" != \"${expected}\" ]]; then\n    echo \"== ${file} corrupted, hash ${actual} doesn't match expected ${expected} ==\"\n    return 1\n  fi\n}\n\nfunction split-commas() {\n  echo $1 | tr \",\" \"\\n\"\n}\n\nfunction try-download-release() {\n  local -r nodeup_urls=( $(split-commas \"${NODEUP_URL}\") )\n  if [[ -n \"${NODEUP_HASH:-}\" ]]; then\n    local -r nodeup_hash=\"${NODEUP_HASH}\"\n  else\n  # TODO: Remove?\n    echo \"Downloading sha256 (not found in env)\"\n    download-or-bust nodeup.sha256 \"\" \"${nodeup_urls[@]/%/.sha256}\"\n    local -r nodeup_hash=$(cat nodeup.sha256)\n  fi\n\n  echo \"Downloading nodeup (${nodeup_urls[@]})\"\n  download-or-bust nodeup \"${nodeup_hash}\" \"${nodeup_urls[@]}\"\n\n  chmod +x nodeup\n}\n\nfunction download-release() {\n  case \"$(uname -m)\" in\n  x86_64*|i?86_64*|amd64*)\n    NODEUP_URL=\"${NODEUP_URL_AMD64}\"\n    NODEUP_HASH=\"${NODEUP_HASH_AMD64}\"\n    ;;\n  aarch64*|arm64*)\n    NODEUP_URL=\"${NODEUP_URL_ARM64}\"\n    NODEUP_HASH=\"${NODEUP_HASH_ARM64}\"\n    ;;\n  *)\n    echo \"Unsupported host arch: $(uname -m)\" >&2\n    exit 1\n    ;;\n  esac\n\n  # In case of failure checking integrity of release, retry.\n  cd ${INSTALL_DIR}/bin\n  until try-download-release; do\n    sleep 15\n    echo \"Couldn't download release. Retrying...\"\n  done\n\n  echo \"Running nodeup\"\n  # We can't run in the foreground because of https://github.com/docker/docker/issues/23793\n  ( cd ${INSTALL_DIR}/bin; ./nodeup --install-systemd-unit --conf=${INSTALL_DIR}/conf/kube_env.yaml --v=8  )\n}\n\nfunction run-bootstrap-scripts() {\n\tcat ./bootstrap_scripts.txt | while read scripturl scripthash; do\n\t\ttry-run-bootstrap-script \"$scripthash\" \"$scripturl\"\n\tdone\n}\n\nfunction try-run-bootstrap-script() {\n\tlocal -r scripthash=\"$1\"\n\tlocal -r scripturls=( $(split-commas \"$2\") )\n\tlocal -r scriptname=\"${scripturls[0]##*/}\"\n\n\tif [[ -n \"${scripthash}\" ]]; then\n\t\tlocal -r scriptsha256=\"${scripthash}\"\n\telse\n\t\techo \"Downloading ${scriptname}.sha256 (not found in env)\"\n\t\tdownload-or-bust \"${scriptname}.sha256\" \"\" \"${scripturls[@]/%/.sha256}\"\n\t\tlocal -r scriptsha256=$(cat \"${scriptname}.sha256\")\n\tfi\n\n\techo \"Downloading ${scriptname} (${scripturls[@]})\"\n\tdownload-or-bust \"${scriptname}\" \"${scriptsha256}\" \"${scripturls[@]}\"\n\n\techo \"=== Running ${scriptname} ===\"\n\tchmod +x \"$scriptname\"\n\t./$scriptname\n\techo \"=== Completed ${scriptname} ===\"\n}\n\n####################################################################################\n\n/bin/systemd-machine-id-setup || echo \"failed to set up ensure machine-id configured\"\n\necho \"== nodeup node config starting ==\"\nensure-install-dir\n\ncat > bootstrap_scripts.txt << '__EOF_BOOTSTRAP_SCRIPTS'\n\n__EOF_BOOTSTRAP_SCRIPTS\n\ncat > conf/cluster_spec.yaml << '__EOF_CLUSTER_SPEC'\ncloudConfig: null\ncontainerRuntime: containerd\ncontainerd:\n  configOverride: |\n    version = 2\n\n    [plugins]\n\n      [plugins.\"io.containerd.grpc.v1.cri\"]\n\n        [plugins.\"io.containerd.grpc.v1.cri\".registry]\n\n          [plugins.\"io.containerd.grpc.v1.cri\".registry.mirrors]\n\n            [plugins.\"io.containerd.grpc.v1.cri\".registry.mirrors.\"*\"]\n              endpoint = [\"http://HostIP2:Port2\"]\n\n            [plugins.\"io.containerd.grpc.v1.cri\".registry.mirrors.\"docker.io\"]\n              endpoint = [\"https://registry-1.docker.io\"]\n  logLevel: info\n  packages:\n    hashAmd64: \"0000000000000000000000000000000000000000000000000000000000000000\"\n    urlAmd64: https://github.com/containerd/containerd/releases/download/v1.3.9/cri-containerd-cni-1.3.9-linux-amd64.tar.gz\n  registryMirrors:\n    '*':\n    - http://HostIP2:Port2\n    docker.io:\n    - https://registry-1.docker.io\n  version: 1.4.3\ndocker:\n  skipInstall: true\nencryptionConfig: null\netcdClusters:\n  events:\n    version: 3.4.13\n  main:\n    version: 3.4.13\nkubeAPIServer:\n  allowPrivileged: true\n  anonymousAuth: false\n  apiServerCount: 1\n  authorizationMode: AlwaysAllow\n  bindAddress: 0.0.0.0\n  cloudProvider: aws\n  enableAdmissionPlugins:\n  - NamespaceLifecycle\n  - LimitRanger\n  - ServiceAccount\n  - PersistentVolumeLabel\n  - DefaultStorageClass\n  - DefaultTolerationSeconds\n  - MutatingAdmissionWebhook\n  - ValidatingAdmissionWebhook\n  - NodeRestriction\n  - ResourceQuota\n  etcdServers:\n  - http://127.0.0.1:4001\n  etcdServersOverrides:\n  - /events#http://127.0.0.1:4002\n  image: k8s.gcr.io/kube-apiserver:v1.19.0\n  kubeletPreferredAddressTypes:\n  - InternalIP\n  - Hostname\n  - ExternalIP\n  logLevel: 2\n  requestheaderAllowedNames:\n  - aggregator\n  requestheaderExtraHeaderPrefixes:\n  - X-Remote-Extra-\n  requestheaderGroupHeaders:\n  - X-Remote-Group\n  requestheaderUsernameHeaders:\n  - X-Remote-User\n  securePort: 443\n  serviceClusterIPRange: 100.64.0.0/13\n  storageBackend: etcd3\nkubeControllerManager:\n  allocateNodeCIDRs: true\n  attachDetachReconcileSyncPeriod: 1m0s\n  cloudProvider: aws\n  clusterCIDR: 100.96.0.0/11\n  clusterName: containerd.example.com\n  configureCloudRoutes: false\n  image: k8s.gcr.io/kube-controller-manager:v1.19.0\n  leaderElection:\n    leaderElect: true\n  logLevel: 2\n  useServiceAccountCredentials: true\nkubeProxy:\n  clusterCIDR: 100.96.0.0/11\n  cpuRequest: 100m\n  hostnameOverride: '@aws'\n  image: k8s.gcr.io/kube-proxy:v1.19.0\n  logLevel: 2\nkubeScheduler:\n  image: k8s.gcr.io/kube-scheduler:v1.19.0\n  leaderElection:\n    leaderElect: true\n  logLevel: 2\nkubelet:\n  anonymousAuth: false\n  cgroupRoot: /\n  cloudProvider: aws\n  clusterDNS: 100.64.0.10\n  clusterDomain: cluster.local\n  enableDebuggingHandlers: true\n  evictionHard: memory.available<100Mi,nodefs.available<10%,nodefs.inodesFree<5%,imagefs.available<10%,imagefs.inodesFree<5%\n  hostnameOverride: '@aws'\n  kubeconfigPath: /var/lib/kubelet/kubeconfig\n  logLevel: 2\n  networkPluginName: cni\n  nonMasqueradeCIDR: 100.64.0.0/10\n  podManifestPath: /etc/kubernetes/manifests\nmasterKubelet:\n  anonymousAuth: false\n  cgroupRoot: /\n  cloudProvider: aws\n  clusterDNS: 100.64.0.10\n  clusterDomain: cluster.local\n  enableDebuggingHandlers: true\n  evictionHard: memory.available<100Mi,nodefs.available<10%,nodefs.inodesFree<5%,imagefs.available<10%,imagefs.inodesFree<5%\n  hostnameOverride: '@aws'\n  kubeconfigPath: /var/lib/kubelet/kubeconfig\n  logLevel: 2\n  networkPluginName: cni\n  nonMasqueradeCIDR: 100.64.0.0/10\n  podManifestPath: /etc/kubernetes/manifests\n  registerSchedulable: false\n\n__EOF_CLUSTER_SPEC\n\ncat > conf/ig_spec.yaml << '__EOF_IG_SPEC'\n{}\n\n__EOF_IG_SPEC\n\ncat > conf/kube_env.yaml << '__EOF_KUBE_ENV'\nAssets:\n  amd64:\n  - 3f03e5c160a8b658d30b34824a1c00abadbac96e62c4d01bf5c9271a2debc3ab@https://storage.googleapis.com/kubernetes-release/release/v1.19.0/bin/linux/amd64/kubelet\n  - 79bb0d2f05487ff533999a639c075043c70a0a1ba25c1629eb1eef6ebe3ba70f@https://storage.googleapis.com/kubernetes-release/release/v1.19.0/bin/linux/amd64/kubectl\n  - 977824932d5667c7a37aa6a3cbba40100a6873e7bd97e83e8be837e3e7afd0a8@https://storage.googleapis.com/k8s-artifacts-cni/release/v0.8.7/cni-plugins-linux-amd64-v0.8.7.tgz\n  - 0000000000000000000000000000000000000000000000000000000000000000@https://github.com/containerd/containerd/releases/download/v1.3.9/cri-containerd-cni-1.3.9-linux-amd64.tar.gz\n  arm64:\n  - d8fa5a9739ecc387dfcc55afa91ac6f4b0ccd01f1423c423dbd312d787bbb6bf@https://storage.googleapis.com/kubernetes-release/release/v1.19.0/bin/linux/arm64/kubelet\n  - d4adf1b6b97252025cb2f7febf55daa3f42dc305822e3da133f77fd33071ec2f@https://storage.googleapis.com/kubernetes-release/release/v1.19.0/bin/linux/arm64/kubectl\n  - ae13d7b5c05bd180ea9b5b68f44bdaa7bfb41034a2ef1d68fd8e1259797d642f@https://storage.googleapis.com/k8s-artifacts-cni/release/v0.8.7/cni-plugins-linux-arm64-v0.8.7.tgz\n  - 6e3f80e8451ecbe7b3559247721c3e226be6b228acaadee7e13683f80c20e81c@https://download.docker.com/linux/static/stable/aarch64/docker-20.10.0.tgz\nClusterName: containerd.example.com\nConfigBase: memfs://clusters.example.com/containerd.example.com\nInstanceGroupName: master-us-test-1a\nInstanceGroupRole: Master\nKubeletConfig:\n  anonymousAuth: false\n  cgroupRoot: /\n  cloudProvider: aws\n  clusterDNS: 100.64.0.10\n  clusterDomain: cluster.local\n  enableDebuggingHandlers: true\n  evictionHard: memory.available<100Mi,nodefs.available<10%,nodefs.inodesFree<5%,imagefs.available<10%,imagefs.inodesFree<5%\n  hostnameOverride: '@aws'\n  kubeconfigPath: /var/lib/kubelet/kubeconfig\n  logLevel: 2\n  networkPluginName: cni\n  nodeLabels:\n    kubernetes.io/role: master\n    node-role.kubernetes.io/master: \"\"\n  nonMasqueradeCIDR: 100.64.0.0/10\n  podManifestPath: /etc/kubernetes/manifests\n  registerSchedulable: false\nchannels:\n- memfs://clusters.example.com/containerd.example.com/addons/bootstrap-channel.yaml\netcdManifests:\n- memfs://clusters.example.com/containerd.example.com/manifests/etcd/main.yaml\n- memfs://clusters.example.com/containerd.example.com/manifests/etcd/events.yaml\nprotokubeImage:\n  amd64:\n    hash: 7b3c7f6adbda11b1ec740bd6b969c84f249b7eee818af95f2d321963088245a8\n    name: protokube:1.19.0-alpha.3\n    sources:\n    - https://artifacts.k8s.io/binaries/kops/1.19.0-alpha.3/images/protokube-amd64.tar.gz\n    - https://github.com/kubernetes/kops/releases/download/v1.19.0-alpha.3/images-protokube-amd64.tar.gz\n    - https://kubeupv2.s3.amazonaws.com/kops/1.19.0-alpha.3/images/protokube-amd64.tar.gz\n  arm64:\n    hash: 69270ca9c1c950be65af40337adfccec0a728930fa3224bb0d2e88f181f39ead\n    name: protokube:1.19.0-alpha.3\n    sources:\n    - https://artifacts.k8s.io/binaries/kops/1.19.0-alpha.3/images/protokube-arm64.tar.gz\n    - https://github.com/kubernetes/kops/releases/download/v1.19.0-alpha.3/images-protokube-arm64.tar.gz\n    - https://kubeupv2.s3.amazonaws.com/kops/1.19.0-alpha.3/images/protokube-arm64.tar.gz\nstaticManifests:\n- key: kube-apiserver-healthcheck\n  path: manifests/static/kube-apiserver-healthcheck.yaml\n\n__EOF_KUBE_ENV\n\nrun-bootstrap-scripts\ndownload-release\necho \"== nodeup node config done ==\"\n"
Resources.AWSEC2LaunchTemplatenodescontainerdexamplecom.Properties.LaunchTemplateData.UserData: "#!/bin/bash\nset -o errexit\nset -o nounset\nset -o pipefail\n\nNODEUP_URL_AMD64=https://artifacts.k8s.io/binaries/kops/1.19.0-alpha.3/linux/amd64/nodeup,https://github.com/kubernetes/kops/releases/download/v1.19.0-alpha.3/nodeup-linux-amd64,https://kubeupv2.s3.amazonaws.com/kops/1.19.0-alpha.3/linux/amd64/nodeup\nNODEUP_HASH_AMD64=6980fda4fa37bbdc043738cf4ddac6388eb57f561895c69299c1b0ee263d465d\nNODEUP_URL_ARM64=https://artifacts.k8s.io/binaries/kops/1.19.0-alpha.3/linux/arm64/nodeup,https://github.com/kubernetes/kops/releases/download/v1.19.0-alpha.3/nodeup-linux-arm64,https://kubeupv2.s3.amazonaws.com/kops/1.19.0-alpha.3/linux/arm64/nodeup\nNODEUP_HASH_ARM64=dcc7f9f3c180ee76a511627e46da0ac69cdcb518cdf3be348e5ed046d491eb87\n\nexport AWS_REGION=us-test-1\n\n\n\n\nsysctl -w net.ipv4.tcp_rmem='4096 12582912 16777216' || true\n\n\nfunction ensure-install-dir() {\n  INSTALL_DIR=\"/opt/kops\"\n  # On ContainerOS, we install under /var/lib/toolbox; /opt is ro and noexec\n  if [[ -d /var/lib/toolbox ]]; then\n    INSTALL_DIR=\"/var/lib/toolbox/kops\"\n  fi\n  mkdir -p ${INSTALL_DIR}/bin\n  mkdir -p ${INSTALL_DIR}/conf\n  cd ${INSTALL_DIR}\n}\n\n# Retry a download until we get it. args: name, sha, url1, url2...\ndownload-or-bust() {\n  local -r file=\"$1\"\n  local -r hash=\"$2\"\n  shift 2\n\n  urls=( $* )\n  while true; do\n    for url in \"${urls[@]}\"; do\n      commands=(\n        \"curl -f --ipv4 --compressed -Lo \"${file}\" --connect-timeout 20 --retry 6 --retry-delay 10\"\n        \"wget --inet4-only --compression=auto -O \"${file}\" --connect-timeout=20 --tries=6 --wait=10\"\n        \"curl -f --ipv4 -Lo \"${file}\" --connect-timeout 20 --retry 6 --retry-delay 10\"\n        \"wget --inet4-only -O \"${file}\" --connect-timeout=20 --tries=6 --wait=10\"\n      )\n      for cmd in \"${commands[@]}\"; do\n        echo \"Attempting download with: ${cmd} {url}\"\n        if ! (${cmd} \"${url}\"); then\n          echo \"== Download failed with ${cmd} ==\"\n          continue\n        fi\n        if [[ -n \"${hash}\" ]] && ! validate-hash \"${file}\" \"${hash}\"; then\n          echo \"== Hash validation of ${url} failed. Retrying. ==\"\n          rm -f \"${file}\"\n        else\n          if [[ -n \"${hash}\" ]]; then\n            echo \"== Downloaded ${url} (SHA1 = ${hash}) ==\"\n          else\n            echo \"== Downloaded ${url} ==\"\n          fi\n          return\n        fi\n      done\n    done\n\n    echo \"All downloads failed; sleeping before retrying\"\n    sleep 60\n  done\n}\n\nvalidate-hash() {\n  local -r file=\"$1\"\n  local -r expected=\"$2\"\n  local actual\n\n  actual=$(sha256sum ${file} | awk '{ print $1 }') || true\n  if [[ \"${actual}\" != \"${expected}\" ]]; then\n    echo \"== ${file} corrupted, hash ${actual} doesn't match expected ${expected} ==\"\n    return 1\n  fi\n}\n\nfunction split-commas() {\n  echo $1 | tr \",\" \"\\n\"\n}\n\nfunction try-download-release() {\n  local -r nodeup_urls=( $(split-commas \"${NODEUP_URL}\") )\n  if [[ -n \"${NODEUP_HASH:-}\" ]]; then\n    local -r nodeup_hash=\"${NODEUP_HASH}\"\n  else\n  # TODO: Remove?\n    echo \"Downloading sha256 (not found in env)\"\n    download-or-bust nodeup.sha256 \"\" \"${nodeup_urls[@]/%/.sha256}\"\n    local -r nodeup_hash=$(cat nodeup.sha256)\n  fi\n\n  echo \"Downloading nodeup (${nodeup_urls[@]})\"\n  download-or-bust nodeup \"${nodeup_hash}\" \"${nodeup_urls[@]}\"\n\n  chmod +x nodeup\n}\n\nfunction download-release() {\n  case \"$(uname -m)\" in\n  x86_64*|i?86_64*|amd64*)\n    NODEUP_URL=\"${NODEUP_URL_AMD64}\"\n    NODEUP_HASH=\"${NODEUP_HASH_AMD64}\"\n    ;;\n  aarch64*|arm64*)\n    NODEUP_URL=\"${NODEUP_URL_ARM64}\"\n    NODEUP_HASH=\"${NODEUP_HASH_ARM64}\"\n    ;;\n  *)\n    echo \"Unsupported host arch: $(uname -m)\" >&2\n    exit 1\n    ;;\n  esac\n\n  # In case of failure checking integrity of release, retry.\n  cd ${INSTALL_DIR}/bin\n  until try-download-release; do\n    sleep 15\n    echo \"Couldn't download release. Retrying...\"\n  done\n\n  echo \"Running nodeup\"\n  # We can't run in the foreground because of https://github.com/docker/docker/issues/23793\n  ( cd ${INSTALL_DIR}/bin; ./nodeup --install-systemd-unit --conf=${INSTALL_DIR}/conf/kube_env.yaml --v=8  )\n}\n\nfunction run-bootstrap-scripts() {\n\tcat ./bootstrap_scripts.txt | while read scripturl scripthash; do\n\t\ttry-run-bootstrap-script \"$scripthash\" \"$scripturl\"\n\tdone\n}\n\nfunction try-run-bootstrap-script() {\n\tlocal -r scripthash=\"$1\"\n\tlocal -r scripturls=( $(split-commas \"$2\") )\n\tlocal -r scriptname=\"${scripturls[0]##*/}\"\n\n\tif [[ -n \"${scripthash}\" ]]; then\n\t\tlocal -r scriptsha256=\"${scripthash}\"\n\telse\n\t\techo \"Downloading ${scriptname}.sha256 (not found in env)\"\n\t\tdownload-or-bust \"${scriptname}.sha256\" \"\" \"${scripturls[@]/%/.sha256}\"\n\t\tlocal -r scriptsha256=$(cat \"${scriptname}.sha256\")\n\tfi\n\n\techo \"Downloading ${scriptname} (${scripturls[@]})\"\n\tdownload-or-bust \"${scriptname}\" \"${scriptsha256}\" \"${scripturls[@]}\"\n\n\techo \"=== Running ${scriptname} ===\"\n\tchmod +x \"$scriptname\"\n\t./$scriptname\n\techo \"=== Completed ${scriptname} ===\"\n}\n\n####################################################################################\n\n/bin/systemd-machine-id-setup || echo \"failed to set up ensure machine-id configured\"\n\necho \"== nodeup node config starting ==\"\nensure-install-dir\n\ncat > bootstrap_scripts.txt << '__EOF_BOOTSTRAP_SCRIPTS'\n\n__EOF_BOOTSTRAP_SCRIPTS\n\ncat > conf/cluster_spec.yaml << '__EOF_CLUSTER_SPEC'\ncloudConfig: null\ncontainerRuntime: containerd\ncontainerd:\n  configOverride: |\n    version = 2\n\n    [plugins]\n\n      [plugins.\"io.containerd.grpc.v1.cri\"]\n\n        [plugins.\"io.containerd.grpc.v1.cri\".registry]\n\n          [plugins.\"io.containerd.grpc.v1.cri\".registry.mirrors]\n\n            [plugins.\"io.containerd.grpc.v1.cri\".registry.mirrors.\"*\"]\n              endpoint = [\"http://HostIP2:Port2\"]\n\n            [plugins.\"io.containerd.grpc.v1.cri\".registry.mirrors.\"docker.io\"]\n              endpoint = [\"https://registry-1.docker.io\"]\n  logLevel: info\n  packages:\n    hashAmd64: \"0000000000000000000000000000000000000000000000000000000000000000\"\n    urlAmd64: https://github.com/containerd/containerd/releases/download/v1.3.9/cri-containerd-cni-1.3.9-linux-amd64.tar.gz\n  registryMirrors:\n    '*':\n    - http://HostIP2:Port2\n    docker.io:\n    - https://registry-1.docker.io\n  version: 1.4.3\ndocker:\n  skipInstall: true\nkubeProxy:\n  clusterCIDR: 100.96.0.0/11\n  cpuRequest: 100m\n  hostnameOverride: '@aws'\n  image: k8s.gcr.io/kube-proxy:v1.19.0\n  logLevel: 2\nkubelet:\n  anonymousAuth: false\n  cgroupRoot: /\n  cloudProvider: aws\n  clusterDNS: 100.64.0.10\n  clusterDomain: cluster.local\n  enableDebuggingHandlers: true\n  evictionHard: memory.available<100Mi,nodefs.available<10%,nodefs.inodesFree<5%,imagefs.available<10%,imagefs.inodesFree<5%\n  hostnameOverride: '@aws'\n  kubeconfigPath: /var/lib/kubelet/kubeconfig\n  logLevel: 2\n  networkPluginName: cni\n  nonMasqueradeCIDR: 100.64.0.0/10\n  podManifestPath: /etc/kubernetes/manifests\n\n__EOF_CLUSTER_SPEC\n\ncat > conf/ig_spec.yaml << '__EOF_IG_SPEC'\n{}\n\n__EOF_IG_SPEC\n\ncat > conf/kube_env.yaml << '__EOF_KUBE_ENV'\nAssets:\n  amd64:\n  - 3f03e5c160a8b658d30b34824a1c00abadbac96e62c4d01bf5c9271a2debc3ab@https://storage.googleapis.com/kubernetes-release/release/v1.19.0/bin/linux/amd64/kubelet\n  - 79bb0d2f05487ff533999a639c075043c70a0a1ba25c1629eb1eef6ebe3ba70f@https://storage.googleapis.com/kubernetes-release/release/v1.19.0/bin/linux/amd64/kubectl\n  - 977824932d5667c7a37aa6a3cbba40100a6873e7bd97e83e8be837e3e7afd0a8@https://storage.googleapis.com/k8s-artifacts-cni/release/v0.8.7/cni-plugins-linux-amd64-v0.8.7.tgz\n  - 0000000000000000000000000000000000000000000000000000000000000000@https://github.com/containerd/containerd/releases/download/v1.3.9/cri-containerd-cni-1.3.9-linux-amd64.tar.gz\n  arm64:\n  - d8fa5a9739ecc387dfcc55afa91ac6f4b0ccd01f1423c423dbd312d787bbb6bf@https://storage.googleapis.com/kubernetes-release/release/v1.19.0/bin/linux/arm64/kubelet\n  - d4adf1b6b97252025cb2f7febf55daa3f42dc305822e3da133f77fd33071ec2f@https://storage.googleapis.com/kubernetes-release/release/v1.19.0/bin/linux/arm64/kubectl\n  - ae13d7b5c05bd180ea9b5b68f44bdaa7bfb41034a2ef1d68fd8e1259797d642f@https://storage.googleapis.com/k8s-artifacts-cni/release/v0.8.7/cni-plugins-linux-arm64-v0.8.7.tgz\n  - 6e3f80e8451ecbe7b3559247721c3e226be6b228acaadee7e13683f80c20e81c@https://download.docker.com/linux/static/stable/aarch64/docker-20.10.0.tgz\nClusterName: containerd.example.com\nConfigBase: memfs://clusters.example.com/containerd.example.com\nInstanceGroupName: nodes\nInstanceGroupRole: Node\nKubeletConfig:\n  anonymousAuth: false\n  cgroupRoot: /\n  cloudProvider: aws\n  clusterDNS: 100.64.0.10\n  clusterDomain: cluster.local\n  enableDebuggingHandlers: true\n  evictionHard: memory.available<100Mi,nodefs.available<10%,nodefs.inodesFree<5%,imagefs.available<10%,imagefs.inodesFree<5%\n  hostnameOverride: '@aws'\n  kubeconfigPath: /var/lib/kubelet/kubeconfig\n  logLevel: 2\n  networkPluginName: cni\n  nodeLabels:\n    kubernetes.io/role: node\n    node-role.kubernetes.io/node: \"\"\n  nonMasqueradeCIDR: 100.64.0.0/10\n  podManifestPath: /etc/kubernetes/manifests\nchannels:\n- memfs://clusters.example.com/containerd.example.com/addons/bootstrap-channel.yaml\n\n__EOF_KUBE_ENV\n\nrun-bootstrap-scripts\ndownload-release\necho \"== nodeup node config done ==\"\n"
